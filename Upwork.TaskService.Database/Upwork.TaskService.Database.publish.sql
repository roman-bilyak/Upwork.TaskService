/*
Deployment script for TaskServiceDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TaskServiceDb"
:setvar DefaultFilePrefix "TaskServiceDb"
:setvar DefaultDataPath "C:\Users\Roman\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\Roman\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating Table [dbo].[fxPriority]...';


GO
CREATE TABLE [dbo].[fxPriority] (
    [Id]   SMALLINT      NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[fxStatus]...';


GO
CREATE TABLE [dbo].[fxStatus] (
    [Id]   SMALLINT      NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[tblHoliday]...';


GO
CREATE TABLE [dbo].[tblHoliday] (
    [Date]    DATE         NOT NULL,
    [Holiday] VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Date] ASC)
);


GO
PRINT N'Creating Table [dbo].[tblTask]...';


GO
CREATE TABLE [dbo].[tblTask] (
    [Id]          NVARCHAR (50)  NOT NULL,
    [Name]        NVARCHAR (100) NOT NULL,
    [Description] NVARCHAR (500) NOT NULL,
    [DueDate]     DATE           NOT NULL,
    [StartDate]   DATE           NOT NULL,
    [EndDate]     DATE           NOT NULL,
    [Priority]    SMALLINT       NOT NULL,
    [Status]      SMALLINT       NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tblTask_fxPriority]...';


GO
ALTER TABLE [dbo].[tblTask]
    ADD CONSTRAINT [FK_tblTask_fxPriority] FOREIGN KEY ([Priority]) REFERENCES [dbo].[fxPriority] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tblTask_fxStatus]...';


GO
ALTER TABLE [dbo].[tblTask]
    ADD CONSTRAINT [FK_tblTask_fxStatus] FOREIGN KEY ([Status]) REFERENCES [dbo].[fxStatus] ([Id]);


GO
PRINT N'Creating Function [dbo].[fnIsHoliday]...';


GO
CREATE FUNCTION [dbo].[fnIsHoliday]
(
	@Date DATE
)
RETURNS BIT
AS
BEGIN
	IF DATENAME(dw, @Date) = 'Sunday' OR DATENAME(dw, @Date) = 'Saturday'
	BEGIN
		RETURN 1
	END

	IF EXISTS (SELECT * FROM [dbo].[tblHoliday] WHERE [Date] = @Date)
	BEGIN
		RETURN 1
	END

	RETURN 0
END
GO
PRINT N'Creating Function [dbo].[fnShiftHolidayToWorkday]...';


GO
CREATE FUNCTION [dbo].[fnShiftHolidayToWorkday](@Date date)
RETURNS DATE
AS
BEGIN
    IF DATENAME( dw, @Date ) = 'Saturday'
        SET @Date = DATEADD(day, - 1, @Date)

    ELSE IF DATENAME( dw, @Date ) = 'Sunday'
        SET @Date = DATEADD(day, 1, @Date)

    RETURN @Date
END
GO
PRINT N'Creating Function [dbo].[fnGetHoliday]...';


GO
CREATE FUNCTION [dbo].[fnGetHoliday](@Date DATE)
RETURNS VARCHAR(50)
AS
BEGIN
    DECLARE @s VARCHAR(50)

    SELECT @s = CASE
        WHEN [dbo].[fnShiftHolidayToWorkday](CONVERT(varchar, [Year]  ) + '-01-01') = @Date THEN 'New Year'
        WHEN [dbo].[fnShiftHolidayToWorkday](CONVERT(varchar, [Year]+1) + '-01-01') = @Date THEN 'New Year'
        WHEN [dbo].[fnShiftHolidayToWorkday](CONVERT(varchar, [Year]  ) + '-07-04') = @Date THEN 'Independence Day'
        WHEN [dbo].[fnShiftHolidayToWorkday](CONVERT(varchar, [Year]  ) + '-12-25') = @Date THEN 'Christmas Day'
        WHEN [dbo].[fnShiftHolidayToWorkday](CONVERT(varchar, [Year]) + '-12-31') = @Date THEN 'New Years Eve'
        WHEN [dbo].[fnShiftHolidayToWorkday](CONVERT(varchar, [Year]) + '-11-11') = @Date THEN 'Veteran''s Day'

        WHEN [Month] = 1 AND [DayOfMonth] BETWEEN 15 AND 21 AND [DayName] = 'Monday' THEN 'Martin Luther King Day'
        WHEN [Month] = 5 AND [DayOfMonth] >= 25 AND [DayName] = 'Monday' THEN 'Memorial Day'
        WHEN [Month] = 9  AND [DayOfMonth] <= 7 AND [DayName] = 'Monday' THEN 'Labor Day'
        WHEN [Month] = 11 AND [DayOfMonth] BETWEEN 22 AND 28 AND [DayName] = 'Thursday' THEN 'Thanksgiving Day'
        WHEN [Month] = 11 AND [DayOfMonth] BETWEEN 23 AND 29 AND [DayName] = 'Friday' THEN 'Day After Thanksgiving'
        ELSE NULL END
    FROM (
        SELECT
            [Year] = YEAR(@Date),
            [Month] = MONTH(@Date),
            [DayOfMonth] = DAY(@Date),
            [DayName]   = DATENAME(weekday, @Date)
    ) c

    RETURN @s
END
GO
PRINT N'Creating Function [dbo].[fnGetHolidays]...';


GO
CREATE FUNCTION [dbo].[fnGetHolidays]
(
    @Year INT
)
RETURNS TABLE
AS
RETURN (  
    SELECT [Date], [dbo].[fnGetHoliday]([Date]) AS [Holiday]
    FROM (
        SELECT TOP 366 DATEADD(DAY, ROW_NUMBER () OVER (ORDER BY [column_id]), convert(VARCHAR, @Year) + '-01-01') [Date]
        FROM [master].[sys].[columns]
    ) AS D
    WHERE YEAR([Date]) = @year AND [dbo].[fnGetHoliday]([Date]) IS NOT NULL
)
GO
PRINT N'Creating Procedure [dbo].[spDeleteTask]...';


GO
CREATE PROCEDURE [dbo].[spDeleteTask]
    @Id NVARCHAR(50)
AS
    DELETE FROM [dbo].[tblTask]
    WHERE [Id] = @Id
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spGetAllTasks]...';


GO
CREATE PROCEDURE [dbo].[spGetAllTasks]
AS
    SELECT
        [Id],
        [Name],
        [Description],
        [DueDate],
        [StartDate],
        [EndDate],
        [Priority],
        [Status] 
    FROM [dbo].[tblTask]
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spGetTaskById]...';


GO
CREATE PROCEDURE [dbo].[spGetTaskById]
    @Id NVARCHAR(50)
AS
    SELECT
        [Id],
        [Name],
        [Description],
        [DueDate],
        [StartDate],
        [EndDate],
        [Priority],
        [Status] 
    FROM [dbo].[tblTask]
    WHERE [Id] = @Id
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spValidateTask]...';


GO
CREATE PROCEDURE [dbo].[spValidateTask]
    @Id NVARCHAR(50),
    @Name NVARCHAR(100),
    @Description NVARCHAR(500),
    @DueDate DATE,
    @StartDate DATE,
    @EndDate DATE,
    @Priority SMALLINT,
    @Status SMALLINT
AS
    DECLARE @Error nvarchar(2048)

    IF @DueDate < DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0)
    BEGIN
        SET @Error  = '{ "Member": "DueDate", Message: "''DueDate'' cannot be in the past"}'
        ;THROW 50100, @Error, 1
    END

    IF ([dbo].[fnIsHoliday](@DueDate) = 1)
    BEGIN
        SET @Error  = '{ "Member": "DueDate", Message: "''DueDate'' cannot be on a holiday or weekend"}'
        ;THROW 50200, @Error, 1
    END

    DECLARE @MaxDueDateCount INT = 100
    DECLARE @CurrrentDueDateCount INT

	SELECT @CurrrentDueDateCount = COUNT(*)
    FROM [dbo].[tblTask]
    WHERE [Id] <> @Id AND [DueDate] = @DueDate AND [Priority] = 1 AND [Status] <> 3

    IF @CurrrentDueDateCount >= @MaxDueDateCount
    BEGIN
        SET @Error = '{ "Member": "DueDate", Message: "The system doesn''t allow more than ' + CAST(@MaxDueDateCount AS VARCHAR(10)) + ' High Priority tasks which have the same due date and are not finished"}'
        ;THROW 50300, @Error, 1
    END
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spInsertTask]...';


GO
CREATE PROCEDURE [dbo].[spInsertTask]
    @Id NVARCHAR(50),
    @Name NVARCHAR(100),
    @Description NVARCHAR(500),
    @DueDate DATETIME,
    @StartDate DATETIME,
    @EndDate DATETIME,
    @Priority SMALLINT,
    @Status SMALLINT
AS
    EXEC [dbo].[spValidateTask]
        @Id = @Id,
        @Name = @Name,
        @Description = @Description,
        @DueDate = @DueDate,
        @StartDate = @StartDate,
        @EndDate = @EndDate,
        @Priority = @Priority,
        @Status = @Status

    INSERT INTO [dbo].[tblTask]
    (
        [Id],
        [Name],
        [Description],
        [DueDate],
        [StartDate],
        [EndDate],
        [Priority],
        [Status]
    )
    VALUES
    (
        @Id,
        @Name,
        @Description,
        @DueDate,
        @StartDate,
        @EndDate,
        @Priority,
        @Status
    )

    SELECT
        [Id],
        [Name],
        [Description],
        [DueDate],
        [StartDate],
        [EndDate],
        [Priority],
        [Status] 
    FROM [dbo].[tblTask]
    WHERE [Id] = @Id
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spUpdateTask]...';


GO
CREATE PROCEDURE [dbo].[spUpdateTask]
    @Id NVARCHAR(50),
    @Name NVARCHAR(100),
    @Description NVARCHAR(500),
    @DueDate DATETIME,
    @StartDate DATETIME,
    @EndDate DATETIME,
    @Priority SMALLINT,
    @Status SMALLINT
AS
    EXEC [dbo].[spValidateTask]
        @Id = @Id,
        @Name = @Name,
        @Description = @Description,
        @DueDate = @DueDate,
        @StartDate = @StartDate,
        @EndDate = @EndDate,
        @Priority = @Priority,
        @Status = @Status

    UPDATE [dbo].[tblTask]
    SET
        [Name] = @Name, 
        [Description] = @Description, 
        [DueDate] = @DueDate, 
        [StartDate] = @StartDate,
        [EndDate] = @EndDate,
        [Priority] = @Priority,
        [Status] = @Status
    WHERE [Id] = @Id

    SELECT
        [Id],
        [Name],
        [Description],
        [DueDate],
        [StartDate],
        [EndDate],
        [Priority],
        [Status] 
    FROM [dbo].[tblTask]
    WHERE [Id] = @Id
RETURN 0
GO
INSERT INTO [dbo].[fxPriority]([Id], [Name])
SELECT 1, 'High'
UNION ALL
SELECT 2, 'Medium'
UNION ALL
SELECT 3, 'Low'
GO

INSERT INTO [dbo].[fxStatus]([Id], [Name])
SELECT 1, 'New'
UNION ALL
SELECT 2, 'In Progress'
UNION ALL
SELECT 3, 'Finished'
GO

DECLARE @Year INT
SET @Year = YEAR(GETDATE())

WHILE @Year < YEAR(GETDATE()) + 5
BEGIN
    INSERT INTO [dbo].[tblHoliday]([Date], [Holiday])
    SELECT [Date], [Holiday]
    FROM [dbo].[fnGetHolidays](@Year)

    SET @Year = @Year + 1
END
GO

GO
PRINT N'Update complete.';


GO
